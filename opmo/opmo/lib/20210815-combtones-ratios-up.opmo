;;; ---------------------------------------------------------
;;; Sicht
;;; Copyright Â© 2015-2021 Achim Bornhoeft
;;; ---------------------------------------------------------

(load (merge-pathnames "../lisp/functions.lisp" *load-truename*))


;;; Pitches

;;; TODO: transitions, reduce to 5 min, lower waves,
(defparameter ratios-up 
  (remove nil
          (loop for i from 13 to 18
            ; number of steps depending on limits below
            collect
            (if (oddp i)           
              (loop for j from i to (* 2 i)
                ; odd IDs increasing ratios
                for k = (/ j i)
                when (and (>= k 3/2) (<= k 7/4))
                collect k)
              (loop for j from (* 2 i) downto i
                ; even IDs decreasing ratios
                for k = (/ j i)
                when (and (>= k 3/2) (<= k 7/4))
                collect k)))) 
    "All ratios between 1.5 and 1.75, odd denominator increasing 
  and even denominator decreasing: form with tendencially increasing 
  length of waves: 6 to 19 steps.")

#|
(let ((mcr (flatten ratios-up)))
  (list  (* 1.0 (find-min mcr)) (* 1.0 (find-max mcr))))
;; => min/max ratios

;;; TODO: balance waves with transitions?
(loop for i in ratios-up collect (length i))
;; => tendencially increasing length of waves

(length (flatten ratios-up)) 
;; => number of ratios 
|#

(defparameter freq1 (pitch-to-hertz 'd4))

(defparameter combtones-chords
 (comb-tones freq1 (flatten ratios-up) 2 3 :ratios t :chords t))

;; sort to voices
(defparameter pitches
  (reverse
   (hertz-to-pitch
    (sort
     (matrix-transpose
      (loop for i in combtones-chords
        collect
        (loop for j in i
          when (>= j 17) collect j
          ; neccessary?
          )))
     '< :key 'first) :quantize 1/4)))

;; (pitch-list-plot pitches :join-chords t :join-points t)

;;; Durations
;;; TODO:

(defparameter 3durs 
  (dev-durations 3/4 '(16 20) '(-1 1) :flat nil)
  "3/4 duration with 2 deviations")
(defparameter 4durs 
  (dev-durations 4/4 '(12 16 20) '(-1 1) :flat nil)
  "4/4 duration with 2 deviations")
(defparameter 5durs 
  (dev-durations 5/4 '(10 12 16 20) '(-1 1) :flat nil)
  "5/4 duration with 2 deviations")

(defparameter durall (length (first pitches)) "number of pitches")

(defparameter durs (rnd-sum durall '(9 12 15) :seed 12)
  "sum of 3 durs randomly chosen to fit overall duration.")

(defparameter durations
  (loop repeat (length pitches)
    initially (rnd-seed 17)
    collect
(loop for i in durs
  when (= i 9)
  appending (rnd-pick (rnd-order 3durs :seed (seed)) 
                    :seed (seed))
  when (= i 12)
  appending (rnd-pick (rnd-order 4durs :seed (seed)) 
                    :seed (seed))
  when (= i 15)
  appending (rnd-pick (rnd-order 5durs :seed (seed)) 
                    :seed (seed))))
  "pick randomly from the shuffled durations according to durs")

(defparameter time-sig
  (get-time-signature
   (mclist
  (loop for i in durs appending
    (loop repeat 3 collect
      (/ (/ i 3) 4)))))
  "time signature from the starting durations 3/4 4/4 and 5/4")

;;; Dynamics
;;; TODO: 

;;; Articulations
;;; (list of possible articulations see User Attributes.lisp)
;;; TODO: weighted distribution

(defparameter articulations
  (loop repeat (length pitches)
    with len = (length (first pitches))
    for tremolos = (rnd-sample len '(trem-7e+tr7e - - -))
    for vibratos = (rnd-sample len '(vib non-vib))
    collect (merge-attributes tremolos vibratos)))
 
;;; Voices
    
(defparameter omn
  (make-omn
   :pitch pitches
   :length durations
   :articulation articulations
   :span :pitch))

;; (defparameter part1 (assemble-seq (nth 0 omn) (nth 10 omn)))

;; assign variable for each voice
(setf voices (assign-variable 'voice omn))

;;; Score
#|
(ps 'gm
    :multi voices
    :time-signature time-sig
    :tempo 60)
|#

(progn
  (def-score ratios-up-1to10
             (
              :key-signature 'chromatic
              :time-signature time-sig
              :tempo 60
              :layout (list
                       (bracket-group
                        (flute-layout 'bfl)
                        (oboe-layout 'ob))
                       (bracket-group
                        (violin-layout* (list 'vn-v1 'vn-v2))
                        (viola-layout* (list 'va-v1 'va-v2))
                        (violoncello-layout* (list 'vc-v1 'vc-v2))))
              :start 1
              :end 10
              )
    
    (bfl :omn voice3 :channel 1 :sound 'gm :program 'flute) 
    (ob :omn voice0 :channel 2 :program 'oboe) 
    (vn-v1 :omn voice1 :channel 3 :program 'violin) 
    (vn-v2 :omn voice2 :channel 3 :program 'violin)
    (va-v1 :omn voice5 :channel 4 :program 'viola) 
    (va-v2 :omn voice4 :channel 4 :program 'viola)
    (vc-v1 :omn voice6 :channel 5 :program 'cello)
    (vc-v2 :omn voice7 :channel 5 :program 'cello)
    )
  (audition-musicxml-last-score)
  )