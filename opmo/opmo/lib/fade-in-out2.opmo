;;---------------------------------------------------------
;;; AB84 - Plain
;;; Copyright Â© 2020 Achim Bornhoeft
;;;--------------------------------------------------------

(defun diff-fix-tones (diff fq1 lo hi)
  "Calculating all f2 when diff-tone and f1 known."
  (append (list diff fq1)
          (loop for k from lo to hi
            append
            (loop for i from k downto 1
              for j from 1 to k
              collect (* 1.0 (/ (- (* fq1 j) diff) i))))))

;; (diff-fix-tones  200 500 1 3)  => (200 500 300.0 150.0 800.0 100.0 400.0 1300.0)

(defun fade-io (durlis voices up-curve down-curve)
  "Calculate durations for a continuous fade in and out with indepentent curves for any amount of voices."
  (let* ((fdura (first durlis))
         (mdura (second durlis))
         (ldura (third durlis))
         (up-interp (reverse (gen-transition 0 fdura voices up-curve))) ; first rest duration
         (down-interp (gen-transition ldura 0 voices down-curve)) ; second rest duration
         (up-down (matrix-transpose (list up-interp down-interp)))) ; combine rest durations
    (loop for i in up-down 
      for fi = (first i)
      for si = (second i)
      for hsi = (/ mdura 2)
      collect
      (quantize
       (list 
        (* -1.0 fi) ; first rest
        (+ hsi (- fdura fi)) ; duration until beginning mdura
        (- (- (find-sum (list mdura ldura)) si) hsi) ; remaining duration
        (* -1.0 si)) ; second rest
       '(1 2 3 4 5 6 7 8) :type :ratio))))

;; (fade-io '(3 1 2) 8 1 1)

;; durations per measure          
(setf durs (loop 
             for i in '(3 4 2 3 2)
             for j in '(2 1 2 1 2)
             for k in '(1 1 2 3 2)
             collect (fade-io (list i j k) 8 1 1)))

;; make voices from durations per measure
(setf durations (matrix-transpose durs)) 

;; difference tone 
(setf diff (pitch-to-hertz 'g2))

;; make voices from difference tones
(setf pitches
      (hertz-to-pitch
       (sort-desc
        (flatten
         (gen-eval (* (length durs) 2) '(diff-fix-tones diff (* 4 diff) 1 3))))
       :quantize 1/4))

;; make omn-voices
(setf voices (make-omn
              :pitch pitches
              :length (mcflatten durations)
              :velocity '(pp< p>pp)
              :articulation '(tie)))

;; assign variable for each voice
(setf voices (assign-variable 'voice voices))

;; time signatures from first voice
(setf ts (get-time-signature (first durations)))

;; see GM Instrument Set.lisp for list of available instruments
(ps 'gm
    :fl (list voice0)
    :ob (list voice1)
    :vn* (list voice2 voice3)
    :va* (list voice4 voice5)
    :vc* (list voice6 voice7)
    :time-signature ts)

#!
(progn
  (def-score Plain
             (
              :key-signature 'chromatic
              :time-signature ts
              :tempo 100
              :layout (list
                       (bracket-group
                        (flute-layout 'fl)
                        (oboe-layout 'ob))
                       (bracket-group
                        (violin-layout* (list 'vn-v1 'vn-v2))
                        (viola-layout* (list 'va-v1 'va-v2))
                        (violoncello-layout* (list 'vc-v1 'vc-v2))))
              )
    
    (fl :omn voice0 :channel 1 :sound 'gm :program 'flute) 
    (ob :omn voice1 :channel 2 :program 'oboe) 
    (vn-v1 :omn voice2 :channel 3 :program 'violin) 
    (vn-v2 :omn voice3 :channel 3 :program 'violin)
    (va-v1 :omn voice4 :channel 4 :program 'viola)
    (va-v2 :omn voice5 :channel 4 :program 'viola)
    (vc-v1 :omn voice6 :channel 5 :program 'cello)
    (vc-v2 :omn voice7 :channel 5 :program 'cello)
    )
  (audition-musicxml-last-score)
  )
!#


