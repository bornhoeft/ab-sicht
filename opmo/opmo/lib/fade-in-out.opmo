;;---------------------------------------------------------
;;; AB84 - Plain
;;; Copyright Â© 2020 Achim Bornhoeft
;;;--------------------------------------------------------

(defun diff-fix-tones (diff fq1 lo hi)
  "Calculating all f2 when diff-tone and f1 known."
  (append (list diff fq1)
          (loop for k from lo to hi
            append
            (loop for i from k downto 1
              for j from 1 to k
              collect (* 1.0 (/ (- (* fq1 j)
                                   diff) i))))))

;; (diff-fix-tones  200 500 1 3)  => (200 500 300.0 150.0 800.0 100.0 400.0 1300.0)

#|
1 * 500 - 1 * 300 = 200
1 * 500 - 2 * 150 = 200 
2 * 500 - 1 * 800 = 200
1 * 500 - 3 * 100 = 200
2 * 500 - 2 * 400 = 200  
3 * 500 - 1 * 1300 = 200
|#

(defun fade-io (durlis voices up-curve down-curve)
  (let* ((fdura (first durlis))
         (mdura (second durlis))
         (ldura (third durlis))
         (up-interp (reverse (gen-transition 0 fdura voices up-curve))) ; first rest duration
         (down-interp (gen-transition ldura 0 voices down-curve)) ; second rest duration
         (up-down (matrix-transpose (list up-interp down-interp)))) ; combine rest durations
    (loop for i in up-down 
      collect (quantize
               (remove 0.0 ; remove unwanted zeros
                       (remove -0.0 ; remove unwanted zeros
                               (list 
                                (* -1 (first i)) ; first rest
                                (- fdura (first i)) ; duration until beginning mdura
                                (- (reduce '+ (list mdura ldura)) (second i)) ; remaining duration
                                (* -1 (second i))))) ; second rest
               '(1 2 3 4 5 6 7 8) :type :ratio))))


(setf durs (fade-io '(3 1 2) 8 1 1))
   
(setf diff (pitch-to-hertz 'g2))

(setf pitches
      (hertz-to-pitch  
       (cdr 
        (sort 
         (flatten 
          (gen-eval 2 '(diff-fix-tones diff (* 4 diff) 1 3))) '>)) 
       :quantize 1/4))

(setf voices (make-omn
              :pitch pitches
              :length durs
              :velocity '(p>pp pp<)
              :articulation '(tie)))

(setf voices (assign-variable 'voice voices))

#!
(ps 'gm
    :inst voices)
!#

;; see GM Instrument Set.lisp for list of available instruments

(ps 'gm
    :fl (list voice0)
    :ob (list voice1)
    :vn (list voice2 voice3)
    :va (list voice4 voice5)
    :vc (list voice6 voice7))
 
#|
(setf durs (matrix-transpose 
            (loop 
             for i in '(3 4 2 3 2)
             for j in '(2 1 2 1 2)
             for k in '(1 1 2 3 2)
             collect (fade-io (list i j k) 8 1.25 1.23))))
|#